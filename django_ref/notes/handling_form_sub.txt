
<form action=" {% url 'meetup-detail' meetup.slug %}" method="post">
			{% csrf_token %}
			<ul>
				{{ form.as_ul }}
			</ul>
	</form>
		
// handling what heppens when the bottun is clicked by
// setting the attributes on this html form

/* to be precise, (action and method)

	method controls which typt of http request will be sent
	and we have GET or POST available here
	method="post">
	get is the default but post is the most standard and
	common way of submitting user entered data to a server
	This will send a POST HTTP request 
*/

/* action=" {% url 'meetup-detail' meetup.slug %}"
	
	url 'meet-detail' in this case we are sending it to 
	the same url because if the user entered something
	invalid in the input then I wouldnt want him to go
	to another page
	and meetup slug is the value of its slug
	
	in other words, when they click this button it will send
	a post request to the URL
*/

/*
	We will be getting error if we didnt add this
	{% csrf_token %}
	show an error because there is a 
	default security mechanism
	built into Django when we built forms
	to insure that we prevent cross site request
	forery attacks, an attack pattern
	where an attcker basically rebuilds your site so to
	visuals of your site, on some other server and then
	utilizes the fact that visitors, 
	might not see that they're on a different page
	to then trick visitors to do something, they dont want
	to do, to prevent this attack pattern 
	this why this is important 
	{% csrf_token %} 
	(injects cross site request forgery token)
	only the django server knows the valid token
	the attacker wont know your server because its
	generated by your server
*/

// handling submission can be in the view because that where
the request will arrive ultimately

// up to this point this view,

// this view only handled GET requests if a user entered
// a url or clicks a link

// now that we send a post request to same page then
we need to handle it

// handling having a post request is different than
handling incoming get request 

if we have a get request we want to return our meetup-details template

if we have a post requen then we want to validate the user
input and maybe return this template again

but also if the form validation succeeds, save that data
to the database and redirect the user to some confirmation
page, which we have yet to add 

try:
		if request.method == 'GET':
			selected_meetup = Meetup.objects.get(slug=meetup_slug)
			registration_form = RegisterationForm()
			return render(request, "meetups/meetups-details.html", {
			'meetup_found': True,
			'meetup': selected_meetup,
			'form': registration_form
			})
		else:
			registration_form = RegisterationForm(request.POST) 

// get is the default,
however from the form we sent a post one 

so we send a post request to the form class

if registration_form.is_valid():
			registration_form.save()

is_valid() checks if the email is valid

saves in the database a new entry
.save()

//  note: we will only be able to save an email address ones
across all meetups, we will fine tune it later

patricipant = registration_form.save()

return the participant saved 

selected_meetup.participants.add(participant)
